<?php

namespace lesha724\MathCaptcha;
/**
 * Created by PhpStorm.
 * User: Neff
 * Date: 15.03.2017
 * Time: 0:24
 */
class MathCaptchaAction extends \yii\captcha\CaptchaAction
{
    public $minLength = 0;
    public $maxLength = 100;

    private $_lineCount;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->_lineCount = rand(3, 5);
    }

    /**
     * @inheritdoc
     */
    protected function generateVerifyCode()
    {
        return mt_rand((int)$this->minLength, (int)$this->maxLength);
    }

    /**
     * @inheritdoc
     */
    protected function renderImage($code)
    {
        return parent::renderImage($this->getText($code));
    }

    protected function getText($code)
    {
        $code = (int)$code;
        $rand = mt_rand(min(1, $code - 1), max(1, $code - 1));
        $operation = mt_rand(0, 1);
        if ($operation === 1) {
            return $code - $rand . '+' . $rand;
        } else {
            return $code + $rand . '-' . $rand;
        }
    }

    /**
     * Renders the CAPTCHA image based on the code using GD library.
     * @param string $code the verification code
     * @return string image contents in PNG format.
     */
    protected function renderImageByGD($code)
    {
        $image = imagecreatetruecolor($this->width, $this->height);

        /*$backColor = imagecolorallocate(
            $image,
            (int) ($this->backColor % 0x1000000 / 0x10000),
            (int) ($this->backColor % 0x10000 / 0x100),
            $this->backColor % 0x100
        );*/
        $backColor = imagecolorallocate($image, rand(0, 150), rand(0, 100), rand(0, 120));
        imagefilledrectangle($image, 0, 0, $this->width - 1, $this->height - 1, $backColor);
        imagecolordeallocate($image, $backColor);

        /*if ($this->transparent) {
            imagecolortransparent($image, $backColor);
        }*/

        // Рисуем линии на подстилке
        for ($i=0; $i<$this->_lineCount; $i++)
        {
            $color = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255)); // Случайный цвет c изображения
            imageline($image, rand(0, 20), rand(1, 50), rand(150, 180), rand(1, 50), $color);
        }

        /*$foreColor = imagecolorallocate(
            $image,
            (int) ($this->foreColor % 0x1000000 / 0x10000),
            (int) ($this->foreColor % 0x10000 / 0x100),
            $this->foreColor % 0x100
        );*/

        //$foreColor = imagecolorallocate($image, rand(0, 150), rand(0, 100), rand(0, 150)); // Случайный цвет c изображения
        $length = strlen($code);
        $box = imagettfbbox(30, 0, $this->fontFile, $code);
        $w = $box[4] - $box[0] + $this->offset * ($length - 1);
        $h = $box[1] - $box[5];
        $scale = min(($this->width - $this->padding * 2) / $w, ($this->height - $this->padding * 2) / $h);
        $x = 10;
        $y = round($this->height * 27 / 40);
        for ($i = 0; $i < $length; ++$i) {
            $foreColor = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(50, 255));

            $fontSize = (int) (rand(24, 32) * $scale * 0.8);
            $angle = rand(-20, 20);
            $letter = $code[$i];
            $box = imagettftext($image, $fontSize, $angle, $x, $y, $foreColor, $this->fontFile, $letter);
            $x = $box[2] + $this->offset;
        }

       // imagecolordeallocate($image, $foreColor);


        // Опять линии, уже сверху текста
        for ($i=0; $i<$this->_lineCount; $i++)
        {
            $color = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
            imageline($image, rand(0, 20), rand(1, 50), rand(150, 180), rand(1, 50), $color);
        }

        ob_start();
        imagepng($image);
        imagedestroy($image);

        return ob_get_clean();
    }

    /**
     * Renders the CAPTCHA image based on the code using ImageMagick library.
     * @param string $code the verification code
     * @return string image contents in PNG format.
     */
    protected function renderImageByImagick($code)
    {
        //$backColor = $this->transparent ? new \ImagickPixel('transparent') : new \ImagickPixel('#' . str_pad(dechex($this->backColor), 6, 0, STR_PAD_LEFT));
        $backColor = new \ImagickPixel(sprintf('rgb(%d,%d,%d)',rand(0, 255), rand(0, 255), rand(0, 255)));

        $image = new \Imagick();
        $image->newImage($this->width, $this->height, $backColor);

        $draw = new \ImagickDraw();

        for ($i=0; $i<$this->_lineCount; $i++)
        {
            $color =  new \ImagickPixel(sprintf('rgb(%d,%d,%d)',rand(0, 255), rand(0, 255), rand(0, 255)));
            $draw->setStrokeColor($color);
            $draw->line(rand(0, 20), rand(1, 50), rand(150, 180), rand(1, 50));
        }

        $draw->setFont($this->fontFile);
        $draw->setFontSize(30);
        $fontMetrics = $image->queryFontMetrics($draw, $code);

        $length = strlen($code);
        $w = (int) $fontMetrics['textWidth'] - 8 + $this->offset * ($length - 1);
        $h = (int) $fontMetrics['textHeight'] - 8;
        $scale = min(($this->width - $this->padding * 2) / $w, ($this->height - $this->padding * 2) / $h);
        $x = 10;
        $y = round($this->height * 27 / 40);
        for ($i = 0; $i < $length; ++$i) {
            $foreColor = new \ImagickPixel(sprintf('rgb(%d,%d,%d)',rand(0, 255), rand(0, 255), rand(0, 255)));
            $draw = new \ImagickDraw();
            $draw->setFont($this->fontFile);
            $draw->setFontSize((int) (rand(24, 32) * $scale * 0.8));
            $draw->setFillColor($foreColor);
            $image->annotateImage($draw, $x, $y, rand(-20, 20), $code[$i]);
            $fontMetrics = $image->queryFontMetrics($draw, $code[$i]);
            $x += (int) $fontMetrics['textWidth'] + $this->offset;
        }

        for ($i=0; $i<$this->_lineCount; $i++)
        {
            $color =  new \ImagickPixel(sprintf('rgb(%d,%d,%d)',rand(0, 255), rand(0, 255), rand(0, 255)));
            $draw->setStrokeColor($color);
            $draw->line(rand(0, 20), rand(1, 50), rand(150, 180), rand(1, 50));
        }

        $image->drawImage( $draw );

        $image->setImageFormat('png');
        return $image->getImageBlob();
    }
}